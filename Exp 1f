class RoundRobin:
 processData(self, no_of_processes)
schedulingProcess(self, process_data, time_slice)
calculateTurnaroundTime(self, process_data)
 calculateWaitingTime(self, process_data)
 printData(self, process_data, t_time, w_time, executed_process)
PROGRAM: 
class RoundRobin:
    def processData(self, no_of_processes):
        process_data = []
        for i in range(1,no_of_processes+1):
            temporary = []
            arrival_time = int(input("Enter Arrival Time for Process {}: ".format(i)))
            burst_time = int(input("Enter Burst Time for Process {}: ".format(i)))
            temporary.extend([i, arrival_time, burst_time, 0, burst_time])
            process_data.append(temporary)
        time_slice = int(input("Enter Time Slice: "))
        RoundRobin.schedulingProcess(self, process_data, time_slice)
    def schedulingProcess(self, process_data, time_slice):
        start_time = []
        exit_time = []
        executed_process = []
        ready_queue = []
        s_time = 0
        while 1:
            normal_queue = []
            temp = []
            for i in range(len(process_data)):
                if( process_data[i][1] <= s_time and process_data[i][3] == 0):
                    present = 0
                    if (len(ready_queue) != 0):
                        for k in range(len(ready_queue)):
                            if (process_data[i][0] == ready_queue[k][0]):
                                present = 1
                    if(present == 0):
                        temp.extend([process_data[i][0], process_data[i][1], process_data[i][2], process_data[i][4]])
                        ready_queue.append(temp)
                        temp = []
                  if (len(ready_queue) != 0 and len(executed_process) != 0):
                        for k in range(len(ready_queue)):
                            if (ready_queue[k][0] == executed_process[len(executed_process) - 1]):
                                ready_queue.insert((len(ready_queue) - 1), ready_queue.pop(k))
                  elif (process_data[i][3] == 0):
                    temp.extend([process_data[i][0], process_data[i][1], process_data[i][2], process_data[i][4]])
                    normal_queue.append(temp)
                    temp = []
            if (len(ready_queue) == 0 and len(normal_queue) == 0):
                break
            if (len(ready_queue) != 0):
                if (ready_queue[0][2] > time_slice):
                    start_time.append(s_time)
                    s_time = s_time + time_slice
                    e_time = s_time
                    exit_time.append(e_time)
                    executed_process.append(ready_queue[0][0])
                    for j in range(len(process_data)):
                        if(process_data[j][0] == ready_queue[0][0]):
                            break
                    process_data[j][2] = process_data[j][2] - time_slice
                    ready_queue.pop(0)
                elif (ready_queue[0][2] <= time_slice):
                    start_time.append(s_time)
                    s_time = s_time + ready_queue[0][2]
                    e_time = s_time
                    exit_time.append(e_time)
                    executed_process.append(ready_queue[0][0])
                    for j in range(len(process_data)):
                        if( process_data[j][0] == ready_queue[0][0]):
                            break
                    process_data[j][2] = 0
                    process_data[j][3] = 1
                    process_data[j].append(e_time)
                    ready_queue.pop(0)
            elif (len(ready_queue) == 0):
                if (s_time < normal_queue[0][1]):
                    s_time = normal_queue[0][1]
                if (normal_queue[0][2] > time_slice):
                    start_time.append(s_time)
                    s_time = s_time + time_slice
                    e_time = s_time
                    exit_time.append(e_time)
                    executed_process.append(normal_queue[0][0])
                    for j in range(len(process_data)):
                        if process_data[j][0] == normal_queue[0][0]:
                            break
                    process_data[j][2] = process_data[j][2] - time_slice
                elif (normal_queue[0][2] <= time_slice):
                    start_time.append(s_time)
                    s_time = s_time + normal_queue[0][2]
                    e_time = s_time
                    exit_time.append(e_time)
                    executed_process.append(normal_queue[0][0])
                    for j in range(len(process_data)):
                        if (process_data[j][0] == normal_queue[0][0]):
                            break
                    process_data[j][2] = 0
                    process_data[j][3] = 1
                    process_data[j].append(e_time)
        t_time = RoundRobin.calculateTurnaroundTime(self, process_data)
        w_time = RoundRobin.calculateWaitingTime(self, process_data)
        RoundRobin.printData(self, process_data, t_time, w_time, executed_process)
    def calculateTurnaroundTime(self, process_data):
        total_turnaround_time = 0
        for i in range(len(process_data)):
            turnaround_time = process_data[i][5] - process_data[i][1]
            
            total_turnaround_time = total_turnaround_time + turnaround_time
            process_data[i].append(turnaround_time)
        average_turnaround_time = total_turnaround_time / len(process_data)
        return average_turnaround_time
    def calculateWaitingTime(self, process_data):
        total_waiting_time = 0
        for i in range(len(process_data)):
            waiting_time = process_data[i][6] - process_data[i][4]
            #waiting_time = turnaround_time - burst_time
            total_waiting_time = total_waiting_time + waiting_time
            process_data[i].append(waiting_time)
        average_waiting_time = total_waiting_time / len(process_data)
        #average_waiting_time = total_waiting_time / no_of_processes
        return average_waiting_time
    def printData(self, process_data, average_turnaround_time, average_waiting_time, executed_process):
        process_data.sort(key=lambda x: x[0])
       print("Process_ID  Arrival_Time  Burst_Time  Completion_Time  Turnaround_Time  Waiting_Time")
        for i in range(len(process_data)):
            for j in range(len(process_data[i])):
                if(j==2 or j==3):
                    continue
                print(process_data[i][j], end="              ")
            print()

        print('Average Turnaround Time:',average_turnaround_time)
        print('Average Waiting Time:',average_waiting_time)
        context_switch=0
        for i in range(len(executed_process)-1):
            if(executed_process[i]!=executed_process[i+1]):
                context_switch+=1
        print('Number of context switches:',context_switch )
no_of_processes = int(input("Enter number of processes: "))
rr = RoundRobin()
rr.processData(no_of_processes)
